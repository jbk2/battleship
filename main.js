(()=>{"use strict";class t{static placementCells(e,s){const r=[],[i,l,c,a]=[t.getCellRow(e),t.getCellRow(s),t.getCellCol(e),t.getCellCol(s)];if(i===l)for(let t=Math.min(c,a);t<=Math.max(c,a);t++)r.push(`${i}${t}`);else if(c===a)for(let t=Math.min(i.charCodeAt(0),l.charCodeAt(0));t<=Math.max(i.charCodeAt(0),l.charCodeAt(0));t++)r.push(`${String.fromCharCode(t)}${c}`);return r}static validPlacement(e,s,r,i){const l={diagonal:`Can't place ship: ${r} - ${i} is diagonal positioning`,outOfBounds:`Can't place ship: ${r} - ${i} is out of bounds`,sizeMismatch:"Cell placement size does not equal ship size",occupied:"Can't place ship as not all of its cells are empty"};if(t.diagonal(r,i))throw new Error(l.diagonal);if(t.outOfBounds(r)||t.outOfBounds(i))throw new Error(l.outOfBounds);const c=t.placementCells(r,i);if(s.getSize()!=c.length)throw new Error(l.sizeMismatch);if(t.occupied(c,e))throw new Error(l.occupied);return!0}static outOfBounds(e){const s=t.getCellRow(e),r=t.getCellCol(e);return s.charCodeAt(0)<"a".charCodeAt(0)||s.charCodeAt(0)>"j".charCodeAt(0)||r<1||r>10}static diagonal(e,s){const[r,i,l,c]=[t.getCellRow(e),t.getCellRow(s),t.getCellCol(e),t.getCellCol(s)];return r!==i&&l!==c}static occupied(e,s){for(const r of e){const e=t.getCellRow(r),i=t.getCellCol(r);if(null!=s[e][i].shipId)return!0}return!1}static getCellRow(t){return t[0]}static getCellCol(t){return t.match(/\d+/g)[0]}static getEmptyCells(t){const e=[];for(const[s,r]of Object.entries(t))for(const[t,i]of Object.entries(r)){const r={position:`${s}${t}`,cell:i};null===i.shipId&&e.push(r)}return e}static getRandomCell(){return"abcdefghij"[Math.floor(10*Math.random())]+(Math.floor(10*Math.random())+1).toString()}static getShipsCells(t,e){const s=[];for(let r in t)for(let i in t[r])t[r][i].shipId===e&&s.push(`${r}${i}`);return s}static attackedAlready(t,e){return t.getCell(e).attacked}}class e{static shipCounter=0;#t;#e;#s;#r;static shipDefinitions={carrier:{size:5},battleship:{size:4},cruiser:{size:3},submarine:{size:3},destroyer:{size:2}};constructor(t){this.setTypeAndSize(t),this.#r=0,this.#t="ship-"+ ++e.shipCounter}getId(){return this.#t}getType(){return this.#s}getSize(){return this.#e}setTypeAndSize(t){if(!(t in e.shipDefinitions))throw new Error("type does not exist");const s=e.shipDefinitions[t].size;this.#s=t,this.#e=s}hit(){if(this.getHits()>=this.getSize())return"cannot receive more hits than ship's size";this.#r+=1}removeHit(){if(this.#r<1)throw new Error(`hitcount already < 1, hit count: ${this.getHits()}`);this.#r-=1}getHits(){return this.#r}isSunk(){return this.getHits()===this.getSize()}}class s{#i;#l={};constructor(){this.setGrid()}setGrid(){this.#i={};const t="abcdefghij".split(""),e=Array.from({length:10},((t,e)=>(e+1).toString()));t.forEach((t=>{this.#i[t]={},e.forEach((e=>{this.#i[t][e]={shipId:null,attacked:!1}}))}))}getGrid(){return this.#i}setCell(t,e){const s=e[0],r=e.slice(1);this.#i[s][r].shipId=t}getCell(t){const e=t[0],s=t.slice(1);return this.#i[e][s]}addShip(t){this.#l[t.getId()]=t}getShips(){return this.#l}getShip(t){return this.#l[t]}populateBoard(){Array.from(["carrier","battleship","cruiser","submarine","destroyer"],(t=>new e(t))).forEach((e=>{let s=!1;for(;!s;){const r=t.getRandomCell(),i=r[0],l=Number(r.slice(1)),c=e.getSize();let a,o;switch(["up","right","down","left"][Math.floor(4*Math.random())]){case"up":a=String.fromCharCode(i.charCodeAt(0)-(c-1)),o=l;break;case"right":a=i,o=l+(c-1);break;case"down":a=String.fromCharCode(i.charCodeAt(0)+(c-1)),o=l;break;case"left":a=i,o=l-(c-1)}const d=a+o.toString();try{t.validPlacement(this.getGrid(),e,r,d),this.placeShip(e,r,d),s=!0}catch(t){}}}))}placeShip(e,s,r){try{t.validPlacement(this.getGrid(),e,s,r);const i=t.placementCells(s,r);return this.addShip(e),i.forEach((t=>{this.setCell(e.getId(),t)})),{success:!0,message:`Ship placed between ${s}-${r}`}}catch(t){throw Error(`Error placing ship ${e.getId()} at ${s} - ${r}: ${t.message}`)}}getComputerMove(){let e;do{e=t.getRandomCell()}while(t.attackedAlready(this,e));return e}receiveAttack(t){const e=this.getCell(t);if(!0===e.attacked)throw new Error("cell has already been attacked");return e.attacked=!0,null!=e.shipId?(this.getShip(e.shipId).hit(),{hit:!0}):{hit:!1}}removeAttack(t){const e=this.getCell(t);if(!e||!0!==e.attacked)throw new Error(`Either targetCell doesn't exist or it does and has not been attacked. Cell; ${t}`);e.attacked=!1}fleetSunk(){return Object.values(this.getShips()).every((t=>t.isSunk()))}sinkFleet(){Object.keys(this.getShips()).forEach((t=>{this.sinkShip(t)}))}unSinkFirstShip(){const e=Object.values(this.getShips())[0],s=Object.keys(this.getShips())[0],r=t.getShipsCells(this.getGrid(),s)[0];return e.removeHit(),this.removeAttack(r),r}sinkShip(e){t.getShipsCells(this.getGrid(),e).forEach((t=>{this.receiveAttack(t)}))}}class r{#s;#c;constructor(t){this.setType(t),this.setBoard()}setType(t){if(!["human","computer"].includes(t))throw new Error("type must be either 'human' or 'computer'");this.#s=t}getType(){return this.#s}setBoard(){this.#c=new s}getBoard(){return this.#c}}class i{static computerBoardListeners=new Map;static displayBoard(t,e,s){const[r,l,c]=["üí•","üåä","üõ≥Ô∏è"],a=`${o=s,o.charAt(0).toUpperCase()+o.slice(1)} player's board`;var o;const d=document.getElementById(`${s}-board`);d.innerHTML="",d.insertAdjacentHTML("beforeend",'<div class="board-header"> <h3 class="board-title"></h3> </div> <table class="board"> <tbody> <tr> <th></th> <th>1</th> <th>2</th> <th>3</th> <th>4</th> <th>5</th> <th>6</th> <th>7</th> <th>8</th> <th>9</th> <th>10</th> </tr> <tr class="row-a"> <th>A</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-b"> <th>B</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-c"> <th>C</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-d"> <th>D</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-e"> <th>E</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-f"> <th>F</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-g"> <th>G</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-h"> <th>H</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-i"> <th>I</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> <tr class="row-j"> <th>J</th> <td class="col-1"></td> <td class="col-2"></td> <td class="col-3"></td> <td class="col-4"></td> <td class="col-5"></td> <td class="col-6"></td> <td class="col-7"></td> <td class="col-8"></td> <td class="col-9"></td> <td class="col-10"></td> </tr> </tbody> </table>'),i.displayFleet(e,s),d.querySelector(".board-title").innerText=a;const n=e.getGrid();for(let t in n)for(let i in n[t]){const a=n[t][i],o=d.querySelector(`.row-${t} > .col-${i}`);a.attacked?a.shipId?(e.getShip(a.shipId).isSunk()&&o.classList.add("sunk"),o.innerText=r):o.innerText=l:!a.attacked&&a.shipId&&"human"===s&&(o.innerText=c)}if("human"===s){const t=document.createElement("button");t.innerText="Re-position fleet",t.id="reload-btn",t.addEventListener("click",(()=>location.reload())),d.appendChild(t)}}static addComputerBoardListeners(t,e){const s=e.getGrid();for(let e in s)for(let r in s[e]){if(!0===s[e][r].attacked)continue;const l=document.querySelector(`#computer-board .row-${e} > .col-${r}`),c=`${e}${r}`,a=t=>{l.style.backgroundColor="lightpink",l.style.cursor="pointer"},o=t=>{l.style.backgroundColor=""},d=e=>{try{t.processMove("human",c)}catch(t){console.log(t)}};l.addEventListener("mouseover",a),l.addEventListener("mouseout",o),l.addEventListener("click",d),i.computerBoardListeners.set(c,{cell:l,handleMouseOver:a,handleMouseOut:o,handleClick:d})}}static removeComputerBoardListeners(t){i.computerBoardListeners.forEach(((t,e)=>{const{cell:s,handleMouseOver:r,handleMouseOut:i,handleClick:l}=t;s.removeEventListener("mouseover",r),s.removeEventListener("mouseout",i),s.removeEventListener("click",l)})),i.computerBoardListeners.clear()}static displayTurn(t){const e=document.querySelector("section#dialogue > div > p");e.innerText="...",setTimeout((()=>e.innerText=`${t}'s turn...`),50)}static displayWin(t){const e=document.querySelector("section#dialogue > div > p");window.scrollTo({top:0,behavior:"smooth"}),e.innerText=`üéâ  ${t} won.  üéâ`,e.classList.add("win")}static displayFleet(t,e){document.querySelector(`#${e}-board .board-header`).insertAdjacentHTML("beforeend",'<div class="fleet-grid"> <div class="grid-item ship carrier"></div> <div class="grid-item ship carrier"></div> <div class="grid-item ship carrier"></div> <div class="grid-item ship carrier"></div> <div class="grid-item ship carrier"></div> <div class="grid-item ship battleship"></div> <div class="grid-item ship battleship"></div> <div class="grid-item ship battleship"></div> <div class="grid-item ship battleship"></div> <div class="grid-item ship cruiser"></div> <div class="grid-item ship cruiser"></div> <div class="grid-item ship cruiser"></div> <div class="grid-item ship submarine"></div> <div class="grid-item ship submarine"></div> <div class="grid-item ship submarine"></div> <div class="grid-item ship destroyer"></div> <div class="grid-item ship destroyer"></div> </div>'),Object.values(t.getShips()).forEach((t=>{const s=t.getType(),r=document.querySelectorAll(`#${e}-board .${s}`),i=t.getHits();for(let t=0;t<i;t++)r[t].classList.add("hit")}))}static launchConfetti(){console.log("launchConfetti started");const t=document.querySelector(".confetti-container");console.log("confettiContainer = ",t),t.innerHTML="";for(let e=0;e<120;e++){const e=document.createElement("div");e.classList.add("confetti-piece"),e.style.left=100*Math.random()+"vw",e.style.top=-120*Math.random()-30+"vh",e.style.animationDelay=.5*Math.random()+"s",t.appendChild(e)}}}class l{#a;#o;#d;constructor(){this.setActivePlayer("human"),this.setPlayers()}setPlayers(){this.#o=new r("human"),this.#d=new r("computer");const t=this.getHumanPlayer().getBoard(),e=this.getComputerPlayer().getBoard();t.populateBoard(),e.populateBoard()}setActivePlayer(t){if("human"!=t&&"computer"!=t)throw new Error("player must be of type 'human' or 'computer'");this.#a=t}getActivePlayer(){return this.#a}toggleActivePlayer(){this.#a="human"===this.#a?"computer":"human"}getHumanPlayer(){return this.#o}getComputerPlayer(){return this.#d}async processMove(t,e=null){if(this.getActivePlayer()!=t)throw new Error(`activePlayer is '${this.getActivePlayer()}', activePlayer must be '${t}' for a '${t}' to attack`);const s="human"===t,r=this.getComputerPlayer().getBoard(),l=this.getHumanPlayer().getBoard(),c=s?r:l,a=s?"computer":"human";try{s||null!==e||(e=l.getComputerMove());const o=c.receiveAttack(e).hit;return i.displayBoard(this,c,a),this.checkWin(c)?(i.launchConfetti(),s||i.removeComputerBoardListeners(r),i.displayWin(t),`${t} wins`):(await new Promise((t=>setTimeout(t,250))),o?s?void i.addComputerBoardListeners(this,r):void setTimeout((()=>this.processMove(t)),400):(this.toggleActivePlayer(),i.displayTurn(this.getActivePlayer()),"computer"===this.getActivePlayer()?setTimeout((()=>this.processMove("computer",null)),500):i.addComputerBoardListeners(this,r),null))}catch(t){throw console.log(`was an error trying to call #receiveAttack(${e})`,t),t}}checkWin(t){return t.fleetSunk()}startGame(){i.displayTurn(this.getActivePlayer());const t=this.getComputerPlayer().getBoard();i.addComputerBoardListeners(this,t)}}!function(){const t=new l,e=t.getHumanPlayer().getBoard(),s=t.getComputerPlayer().getBoard();i.displayBoard(t,e,"human"),i.displayBoard(t,s,"computer"),t.startGame()}()})();